import sqlite3
import logging
import time
from config import TOKEN
import requests

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('notifier.log'),
        logging.StreamHandler()
    ]
)


def get_db_connection(db_name):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SQLite —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
    attempts = 0
    while attempts < 3:
        try:
            conn = sqlite3.connect(db_name, timeout=20)
            conn.execute("PRAGMA journal_mode=WAL")
            conn.execute("PRAGMA busy_timeout=30000")
            return conn
        except sqlite3.Error as e:
            logging.warning(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ {db_name} (–ø–æ–ø—ã—Ç–∫–∞ {attempts + 1}): {e}")
            time.sleep(2 ** attempts)  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
            attempts += 1
    raise sqlite3.OperationalError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ {db_name} –ø–æ—Å–ª–µ 3 –ø–æ–ø—ã—Ç–æ–∫")


def init_databases():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–∞—Ö –¥–∞–Ω–Ω—ã—Ö"""
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        with get_db_connection("users.db") as conn:
            conn.execute("""
                CREATE TABLE IF NOT EXISTS users (
                    user_id INTEGER PRIMARY KEY,
                    username TEXT,
                    first_name TEXT,
                    last_name TEXT,
                    registered_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            """)
            conn.commit()

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        with get_db_connection("vacancies.db") as conn:
            conn.execute("""
                CREATE TABLE IF NOT EXISTS sent_notifications (
                    id INTEGER PRIMARY KEY,
                    vacancy_id INTEGER,
                    user_id INTEGER,
                    sent_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    UNIQUE(vacancy_id, user_id),
                    FOREIGN KEY(vacancy_id) REFERENCES vacancies(id)
                )
            """)
            conn.commit()

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
        raise


def send_telegram_message(chat_id, text):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram Bot API"""
    url = f"https://api.telegram.org/bot{TOKEN}/sendMessage"
    payload = {
        "chat_id": chat_id,
        "text": text,
        "parse_mode": "Markdown",
        "disable_web_page_preview": True
    }

    try:
        response = requests.post(url, json=payload, timeout=10)
        response.raise_for_status()
        return True
    except requests.exceptions.RequestException as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return False


def format_vacancy_message(vacancy):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –≤–∞–∫–∞–Ω—Å–∏–∏"""
    return (
        "üöÄ *–ù–æ–≤–∞—è –≤–∞–∫–∞–Ω—Å–∏—è!*\n"
        f"üìå *{vacancy['title']}*\n"
        f"üè¢ *{vacancy['company']}*\n"
        f"üìç *–†–µ–≥–∏–æ–Ω:* {vacancy['region']}\n"
        f"üí∞ *–ó–∞—Ä–ø–ª–∞—Ç–∞:* {vacancy['salary']}\n"
        f"üßë‚Äçüíª *–û–ø—ã—Ç:* {vacancy['experience']}\n"
        f"üè† *–§–æ—Ä–º–∞—Ç —Ä–∞–±–æ—Ç—ã:* {vacancy['work_format']}\n"
        f"‚è≥ *–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞:* {vacancy['published_at']}\n"
        f"üîó [–°—Å—ã–ª–∫–∞]({vacancy['link']})"
    )


def get_new_vacancies(limit=50):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π –∏–∑ –±–∞–∑—ã"""
    try:
        with get_db_connection("vacancies.db") as conn:
            cursor = conn.cursor()
            cursor.execute("""
                SELECT v.id, v.title, v.link, v.company, v.salary, 
                       v.experience, v.work_format, v.region, v.published_at
                FROM vacancies v
                LEFT JOIN sent_notifications s ON v.id = s.vacancy_id
                WHERE s.vacancy_id IS NULL
                LIMIT ?
            """, (limit,))
            return cursor.fetchall()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–π: {e}")
        return []


def get_active_users():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        with get_db_connection("users.db") as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT user_id FROM users")
            return [row[0] for row in cursor.fetchall()]
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        return []


def mark_as_sent(vacancy_id, user_id):
    """–ü–æ–º–µ—á–∞–µ–º –≤–∞–∫–∞–Ω—Å–∏—é –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é"""
    try:
        with get_db_connection("vacancies.db") as conn:
            conn.execute(
                "INSERT OR IGNORE INTO sent_notifications (vacancy_id, user_id) VALUES (?, ?)",
                (vacancy_id, user_id)
            )
            conn.commit()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –≤–∞–∫–∞–Ω—Å–∏–∏ {vacancy_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")


def check_and_notify():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏
        new_vacancies = get_new_vacancies()
        if not new_vacancies:
            logging.info("–ù–µ—Ç –Ω–æ–≤—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
            return

        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = get_active_users()
        if not users:
            logging.info("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        for vacancy_row in new_vacancies:
            vacancy = {
                'id': vacancy_row[0],
                'title': vacancy_row[1],
                'link': vacancy_row[2],
                'company': vacancy_row[3],
                'salary': vacancy_row[4],
                'experience': vacancy_row[5],
                'work_format': vacancy_row[6],
                'region': vacancy_row[7],
                'published_at': vacancy_row[8]
            }

            message = format_vacancy_message(vacancy)

            for user_id in users:
                try:
                    if send_telegram_message(user_id, message):
                        mark_as_sent(vacancy['id'], user_id)
                    time.sleep(0.5)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

    except Exception as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ check_and_notify: {e}")


def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Å–∫—Ä–∏–ø—Ç"""
    logging.info("–ó–∞–ø—É—Å–∫ –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –≤–∞–∫–∞–Ω—Å–∏–π...")
    init_databases()

    while True:
        check_and_notify()
        time.sleep(300)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        logging.info("–ù–æ—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        logging.critical(f"–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")