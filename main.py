import sqlite3
import asyncio
from telegram import Bot
from telegram.error import TelegramError
import schedule
import time
import logging
from datetime import datetime, timedelta
from config import TOKEN
import os
import subprocess
import sys
import requests

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
SEARCH_HOURS = 240  # –ò—â–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —á–∞—Å–æ–≤
USER_AGENT = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36"
CHECK_INTERVAL = 60  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ N –º–∏–Ω—É—Ç

# –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω—ã
REGIONS = {
    1: "–ú–æ—Å–∫–≤–∞",
    2: "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥",
    4: "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫",
    3: "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥",
    113: "–†–æ—Å—Å–∏—è"  # –£–¥–∞–ª–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('vacancy_parser.log'),
        logging.StreamHandler()
    ]
)


def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        # –ë–∞–∑–∞ –≤–∞–∫–∞–Ω—Å–∏–π
        conn_vac = sqlite3.connect("vacancies.db")
        cursor_vac = conn_vac.cursor()
        cursor_vac.execute("""
            CREATE TABLE IF NOT EXISTS vacancies (
                id INTEGER PRIMARY KEY,
                title TEXT,
                link TEXT UNIQUE,
                company TEXT,
                salary TEXT,
                experience TEXT,
                work_format TEXT,
                region TEXT,
                published_at TIMESTAMP
            )
        """)
        conn_vac.commit()
        conn_vac.close()

        # –ë–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        conn_users = sqlite3.connect("users.db")
        cursor_users = conn_users.cursor()
        cursor_users.execute("""
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                first_name TEXT,
                last_name TEXT,
                registered_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        conn_users.commit()
        conn_users.close()

        logging.info("–ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")


def get_db_connection(db_name):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SQLite"""
    conn = None
    attempts = 0
    while attempts < 3:
        try:
            conn = sqlite3.connect(db_name, timeout=10)
            conn.execute("PRAGMA busy_timeout = 10000")
            return conn
        except sqlite3.OperationalError as e:
            logging.warning(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ {db_name} (–ø–æ–ø—ã—Ç–∫–∞ {attempts + 1}): {e}")
            time.sleep(1)
            attempts += 1
    raise sqlite3.OperationalError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ {db_name} –ø–æ—Å–ª–µ 3 –ø–æ–ø—ã—Ç–æ–∫")


def get_hh_vacancies():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–π —Å API HH.ru"""
    url = "https://api.hh.ru/vacancies"
    headers = {"User-Agent": USER_AGENT}
    all_vacancies = []

    for region_id, region_name in REGIONS.items():
        params = {
            "text": "Python",
            "area": region_id,
            "per_page": 20,
            "date_from": (datetime.now() - timedelta(hours=SEARCH_HOURS)).strftime('%Y-%m-%dT%H:%M:%S'),
            "order_by": "publication_time"
        }

        try:
            response = requests.get(url, headers=headers, params=params, timeout=10)
            response.raise_for_status()
            items = response.json().get("items", [])
            for item in items:
                item['region'] = region_name
            all_vacancies.extend(items)
            time.sleep(0.5)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞ {region_name}: {e}")

    return all_vacancies


def parse_vacancies():
    """–ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –æ –≤–∞–∫–∞–Ω—Å–∏—è—Ö"""
    raw_vacancies = get_hh_vacancies()
    vacancies = []

    for item in raw_vacancies:
        try:
            published_at = datetime.strptime(
                item.get("published_at"),
                "%Y-%m-%dT%H:%M:%S%z"
            ).strftime('%d.%m.%Y %H:%M')

            schedule = item.get("schedule", {})
            work_format = "–ù–µ —É–∫–∞–∑–∞–Ω"
            if schedule:
                if schedule.get("id") == "remote":
                    work_format = "–£–¥–∞–ª–µ–Ω–Ω–∞—è"
                elif schedule.get("id") == "flexible":
                    work_format = "–ì–∏–±–∫–∏–π –≥—Ä–∞—Ñ–∏–∫"
                else:
                    work_format = "–û—Ñ–∏—Å"

            vacancies.append({
                "title": item.get("name", ""),
                "link": item.get("alternate_url", ""),
                "company": item.get("employer", {}).get("name", ""),
                "salary": format_salary(item.get("salary")),
                "experience": item.get("experience", {}).get("name", "–ù–µ —É–∫–∞–∑–∞–Ω"),
                "work_format": work_format,
                "region": item.get("region", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
                "published_at": published_at
            })
        except Exception as e:
            logging.warning(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∞–∫–∞–Ω—Å–∏–∏: {e}")

    return vacancies


def format_salary(salary_data):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—Ä–ø–ª–∞—Ç—ã"""
    if not salary_data:
        return "–ù–µ —É–∫–∞–∑–∞–Ω–∞"

    from_val = salary_data.get("from")
    to_val = salary_data.get("to")
    currency = salary_data.get("currency", "RUR")

    if from_val and to_val:
        return f"{from_val:,}‚Äì{to_val:,} {currency}".replace(',', ' ')
    elif from_val:
        return f"–æ—Ç {from_val:,} {currency}".replace(',', ' ')
    elif to_val:
        return f"–¥–æ {to_val:,} {currency}".replace(',', ' ')
    return "–ù–µ —É–∫–∞–∑–∞–Ω–∞"


def filter_new_vacancies(vacancies):
    """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π"""
    if not vacancies:
        return []

    new_vacancies = []
    conn = None

    try:
        conn = get_db_connection("vacancies.db")
        cursor = conn.cursor()

        for vacancy in vacancies:
            try:
                cursor.execute("SELECT 1 FROM vacancies WHERE link = ?", (vacancy["link"],))
                if not cursor.fetchone():
                    new_vacancies.append(vacancy)
                    cursor.execute(
                        """INSERT INTO vacancies 
                        (title, link, company, salary, experience, work_format, region, published_at)
                        VALUES (?, ?, ?, ?, ?, ?, ?, ?)""",
                        (
                            vacancy["title"],
                            vacancy["link"],
                            vacancy["company"],
                            vacancy["salary"],
                            vacancy["experience"],
                            vacancy["work_format"],
                            vacancy["region"],
                            vacancy["published_at"]
                        )
                    )
                    conn.commit()
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–∫–∞–Ω—Å–∏–∏: {e}")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –ë–î –≤–∞–∫–∞–Ω—Å–∏–π: {e}")
    finally:
        if conn:
            conn.close()

    return new_vacancies


async def send_telegram_alert(vacancies):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    if not vacancies:
        return

    bot = Bot(token=TOKEN)
    conn = None

    try:
        conn = get_db_connection("users.db")
        cursor = conn.cursor()
        cursor.execute("SELECT user_id FROM users")
        users = cursor.fetchall()

        if not users:
            logging.info("–ù–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
            return

        for user_id, in users:
            for vacancy in vacancies:
                try:
                    message = (
                        "üöÄ *–ù–æ–≤–∞—è –≤–∞–∫–∞–Ω—Å–∏—è!*\n"
                        f"üìå *{vacancy['title']}*\n"
                        f"üè¢ *{vacancy['company']}*\n"
                        f"üìç *–†–µ–≥–∏–æ–Ω:* {vacancy['region']}\n"
                        f"üí∞ *–ó–∞—Ä–ø–ª–∞—Ç–∞:* {vacancy['salary']}\n"
                        f"üßë‚Äçüíª *–û–ø—ã—Ç:* {vacancy['experience']}\n"
                        f"üè† *–§–æ—Ä–º–∞—Ç —Ä–∞–±–æ—Ç—ã:* {vacancy['work_format']}\n"
                        f"‚è≥ *–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞:* {vacancy['published_at']}\n"
                        f"üîó [–°—Å—ã–ª–∫–∞]({vacancy['link']})"
                    )
                    await bot.send_message(
                        chat_id=user_id,
                        text=message,
                        parse_mode="Markdown",
                        disable_web_page_preview=True
                    )
                    await asyncio.sleep(1)
                except TelegramError as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                    if "Forbidden: bot was blocked by the user" in str(e):
                        try:
                            with get_db_connection("users.db") as del_conn:
                                del_conn.execute("DELETE FROM users WHERE user_id = ?", (user_id,))
                                del_conn.commit()
                                logging.info(f"–£–¥–∞–ª–µ–Ω –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–≤—à–∏–π –±–æ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}")
                        except Exception as db_error:
                            logging.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {db_error}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
    finally:
        if conn:
            conn.close()


async def async_job():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ –ø–∞—Ä—Å–µ—Ä–∞"""
    try:
        logging.info("–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–∫–∞–Ω—Å–∏–π...")
        vacancies = parse_vacancies()
        new_vacancies = filter_new_vacancies(vacancies)

        if new_vacancies:
            logging.info(f"–ù–∞–π–¥–µ–Ω–æ {len(new_vacancies)} –Ω–æ–≤—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π")
            await send_telegram_alert(new_vacancies)
        else:
            logging.info("–ù–æ–≤—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ async_job: {e}")


def run_parser():
    """–ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞"""
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)

    schedule.every(CHECK_INTERVAL).minutes.do(
        lambda: loop.run_until_complete(async_job())
    )

    while True:
        schedule.run_pending()
        time.sleep(1)


if __name__ == "__main__":
    init_db()

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
    bot_process = subprocess.Popen([sys.executable, "bot.py"])

    # –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
    print("=" * 50)
    print(f"üöÄ –ü–∞—Ä—Å–µ—Ä –≤–∞–∫–∞–Ω—Å–∏–π | –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ {CHECK_INTERVAL} –º–∏–Ω")
    print(f"ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ (PID: {bot_process.pid})")
    print("=" * 50)

    try:
        run_parser()
    except KeyboardInterrupt:
        bot_process.terminate()
        print("\n" + "=" * 50)
        print("üõë –ü–∞—Ä—Å–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –±–æ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")
        print("=" * 50)