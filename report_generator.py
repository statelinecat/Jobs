import sqlite3
import pandas as pd
import asyncio
from telegram import Bot
from telegram.error import TelegramError
from datetime import datetime
from config import TOKEN, CHAT_ID
import os


def generate_excel_report():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è Excel-–æ—Ç—á–µ—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –≤–∞–∫–∞–Ω—Å–∏—è—Ö"""
    try:
        if not os.path.exists("vacancies.db"):
            print("‚ùå –§–∞–π–ª vacancies.db –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return None

        conn = sqlite3.connect("vacancies.db")

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –æ–ø—ã—Ç–æ–º —Ä–∞–±–æ—Ç—ã –∏ —Ñ–æ—Ä–º–∞—Ç–æ–º —Ä–∞–±–æ—Ç—ã
        df = pd.read_sql_query("""
            SELECT 
                title AS '–î–æ–ª–∂–Ω–æ—Å—Ç—å',
                company AS '–ö–æ–º–ø–∞–Ω–∏—è',
                region AS '–†–µ–≥–∏–æ–Ω',
                salary AS '–ó–∞—Ä–ø–ª–∞—Ç–∞',
                experience AS '–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã',
                work_format AS '–§–æ—Ä–º–∞—Ç —Ä–∞–±–æ—Ç—ã',
                published_at AS '–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏',
                link AS '–°—Å—ã–ª–∫–∞'
            FROM vacancies
            ORDER BY published_at DESC
        """, conn)

        conn.close()

        if df.empty:
            print("‚ö† –í –±–∞–∑–µ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≤–∞–∫–∞–Ω—Å–∏—è—Ö")
            return None

        # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç —Å —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
        report_date = datetime.now().strftime("%Y-%m-%d_%H-%M")
        excel_filename = f"vacancies_report_{report_date}.xlsx"

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Excel —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        with pd.ExcelWriter(excel_filename, engine='xlsxwriter') as writer:
            df.to_excel(writer, index=False, sheet_name='–í–∞–∫–∞–Ω—Å–∏–∏')

            workbook = writer.book
            worksheet = writer.sheets['–í–∞–∫–∞–Ω—Å–∏–∏']

            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å—Ç–∏–ª–∏
            header_format = workbook.add_format({
                'bold': True,
                'align': 'center',
                'valign': 'vcenter',
                'border': 1
            })

            # –ê–≤—Ç–æ-—à–∏—Ä–∏–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫
            for col_num, column_title in enumerate(df.columns):
                max_len = max(
                    df[column_title].astype(str).map(len).max(),
                    len(column_title)
                ) + 2
                worksheet.set_column(col_num, col_num, max_len)

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
            for col_num, value in enumerate(df.columns.values):
                worksheet.write(0, col_num, value, header_format)

        return excel_filename

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
        return None


async def send_report_to_telegram(filename):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –≤ Telegram"""
    try:
        bot = Bot(token=TOKEN)

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
        conn = sqlite3.connect("vacancies.db")
        cursor = conn.cursor()

        cursor.execute("SELECT COUNT(*) FROM vacancies")
        total_vacancies = cursor.fetchone()[0]

        cursor.execute("SELECT COUNT(DISTINCT company) FROM vacancies")
        unique_companies = cursor.fetchone()[0]

        cursor.execute("""
            SELECT experience, COUNT(*) 
            FROM vacancies 
            GROUP BY experience
        """)
        experience_stats = cursor.fetchall()

        cursor.execute("""
            SELECT work_format, COUNT(*) 
            FROM vacancies 
            GROUP BY work_format
        """)
        work_format_stats = cursor.fetchall()

        conn.close()

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        experience_text = "\n".join([f"‚Ä¢ {exp}: {count}" for exp, count in experience_stats])
        work_format_text = "\n".join([f"‚Ä¢ {fmt}: {count}" for fmt, count in work_format_stats])

        caption = (
            f"üìä *–û—Ç—á–µ—Ç –ø–æ –≤–∞–∫–∞–Ω—Å–∏—è–º*\n"
            f"üìÖ {datetime.now().strftime('%d.%m.%Y %H:%M')}\n"
            f"üìå –í—Å–µ–≥–æ –≤–∞–∫–∞–Ω—Å–∏–π: {total_vacancies}\n"
            f"üè¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π: {unique_companies}\n"
            f"\nüßë‚Äçüíª *–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –æ–ø—ã—Ç—É:*\n{experience_text}\n"
            f"\nüè† *–§–æ—Ä–º–∞—Ç —Ä–∞–±–æ—Ç—ã:*\n{work_format_text}"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        with open(filename, 'rb') as file:
            await bot.send_document(
                chat_id=CHAT_ID,
                document=file,
                caption=caption,
                filename=filename,
                parse_mode="Markdown"
            )

        print(f"‚úÖ –û—Ç—á–µ—Ç {filename} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
        return False


async def main():
    print("\n" + "=" * 50)
    print("üîÑ –ù–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞...")
    print("=" * 50)

    excel_file = generate_excel_report()

    if excel_file:
        if await send_report_to_telegram(excel_file):
            try:
                os.remove(excel_file)
                print(f"üóë –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {excel_file} —É–¥–∞–ª–µ–Ω")
            except Exception as e:
                print(f"‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª: {e}")
    else:
        print("‚ùå –û—Ç—á–µ—Ç –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")


if __name__ == "__main__":
    asyncio.run(main())